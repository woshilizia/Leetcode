class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>>res = new ArrayList<>();
        boolean[] vis = new boolean[nums.length];
        List<Integer>now = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            vis[i] = true;
            now.add(nums[i]);
            dfs(nums, vis, res, now, 1);
            now.clear();
            vis[i] = false;
        }
        return res;
    }
    public void dfs(int[] nums, boolean[] vis, List<List<Integer>> res, List<Integer> now, int num){
        if (num == nums.length){
            List<Integer>tmp = new ArrayList<>(now);
            res.add(tmp);
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!vis[i]){
                vis[i] = true;
                now.add(nums[i]);
                dfs(nums, vis, res, now, num+1);
                now.remove(now.size()-1);
                vis[i] = false;
            }
        }
    }
}