class Solution {
    public double knightProbability(int N, int K, int r, int c) {
        double[][]dp = new double[N][N];
        int[]dx = new int[]{-2,-2,-1,-1,1,1,2,2};
        int[]dy = new int[]{1,-1,2,-2,2,-2,1,-1};
        dp[r][c] = 1;
        for (int l = 0; l < K; l++) {
            double[][] now = new double[N][N];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    for (int k = 0; k < 8; k++) {
                        int tx = dx[k]+i;
                        int ty = dy[k]+j;
                        if (tx>=0 && tx<N && ty>=0 && ty<N)
                            now[tx][ty] += dp[i][j]/8;
                    }
                }
            }
            dp = now;
        }
        double res = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                res += dp[i][j];
            }

        }
        return res;
    }
}