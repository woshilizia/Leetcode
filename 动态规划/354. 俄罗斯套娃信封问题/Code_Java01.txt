public static int maxEnvelopes(int[][] envelopes) {
        if (envelopes.length == 0 || envelopes[0].length == 0)
            return 0;
        Arrays.sort(envelopes, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] == o2[0]) return o2[1] - o1[1];
                return o1[0] - o2[0];
            }
        });
        int[] dp = new int[envelopes.length];
        int start = 0, end = 1;
        dp[0] = envelopes[0][1];
        for (int i = 1; i < envelopes.length; i++) {
            if (envelopes[i][1] > dp[end-1])
                dp[end++] = envelopes[i][1];
            else
                binaryRenew(dp, start, end, envelopes[i][1]);
        }
        return end-start;
    }
    public static void binaryRenew(int[]dp, int start, int end, int k){
        while (start <= end){
            int mid = (start+end) / 2;
            if (dp[mid] < k)
                start = mid+1;
            else if ((mid == 0) || (dp[mid] > k && dp[mid-1] < k)){
                dp[mid] = k;
                break;
            }else
                end = mid-1;
        }
    }