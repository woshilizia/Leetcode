public static int rob(int[] nums) {
        if (nums.length == 0)
            return 0;
        if (nums.length == 1)
            return nums[0];
        if (nums.length == 2)
            return Math.max(nums[0], nums[1]);
        int max;
        int[][] dp = new int[nums.length][2];
        dp[0][0] = 0; dp[0][1] = nums[0]; dp[1][0] = dp[1][1] = nums[1];
        dp[2][0] = nums[2]; dp[2][1] = nums[0] + nums[2];
        if (nums.length == 3)
            max = Math.max(nums[0], Math.max(nums[1], nums[2]));
        else
            max = Math.max(dp[2][1], nums[1]);
        for (int i = 3; i < nums.length; i++) {
            dp[i][0] = Math.max(dp[i-3][0], dp[i-2][0]) + nums[i];
            if (i != nums.length -1)
                dp[i][1] = Math.max(dp[i-3][1], dp[i-2][1]) + nums[i];
            max = Math.max(max, Math.max(dp[i][0], dp[i][1]));
        }
        return max;
    }
