以后碰到这类题：
给一个数组，选择其中的几个数，相加等于k
问你有没有这种方案，或者说，有多少种方案

这类题目的想法都是类似的。
首先，既然是要找出几个数，相加为k
那么我来一个dp[k+1]，
dp[j]代表相加为j的方案数
若是存在与否，那么可以true or false，反正一样的。

总的想法就是，
每次加一个类型的数，那么方案数就要重新计算了。

所以，最外围的循环就是i从0-数组个数
然后里面的循环：
如果是01背包，也就是说，不能重复的话
那么就是从k-0

如果是完全背包，可以重复的话
那么就是，从0-k

因为01背包的话，从k-0，用的是之前的状态
完全背包，从0-k，状态是更新之后的

来一个完全背包：
class Solution {
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount+1];
        dp[0] = 1;
        for (int coin : coins) {
            for (int j = coin; j <= amount; j++) {
                dp[j] += dp[j - coin];
            }
        }
        return dp[amount];
    }
}