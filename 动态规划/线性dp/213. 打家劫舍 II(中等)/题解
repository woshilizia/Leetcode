这题的话，我应该算做出来了，虽然代码不够精致。
我的想法是，保存两个状态，dp[][0]代表第一个没有偷，dp[][1]代表偷了第一个
然后dp[i][] = Math.max(dp[i-3][],dp[i-2][])+nums[i]
我这里的话，每个dp代表的是选了num[i]为结尾的状态。

然后我看了别人的代码吧，大概也是保存两个状态，但状态转移方程是dp[i][] = Math.max(dp[i-1][],dp[i-2][]+nums[i])
它这里的话，每个dp保存的并不是加入num的值，而是当前i位置的最大值。
总得来说差别不大
