看到这道题的一瞬间，第一想法就是最大连续子序列，但是后来发现并不对，因为有负数的存在。

然后我想着，每次出现偶数个负数时，那肯定没关系，直接相乘就是了，要是出现奇数个负数时，那么把负数的位置标记一下，再次出现负数时再乘起来就是了。

但后来发现又有问题，如果最后一个负数出现，它很大，乘起来比最前面的负数大，那么岂不是应该乘它？
既然这样，那应该来一个负数队列，来判断究竟应该放最后一个还是最前一个。可这又有一个问题了，如果最后一个负数后面是正数，然后它不断相乘后，最终得出的结果是最大的，那岂不是就尴尬了？

就因为这样，我发现这个思路也太不正确了叭。
最后老老实实弄了双重循环，时间复杂度O(n^2)，自己也太菜啦QAQ

然后看了别人的代码，思路是这样的，每次保存当前位置有num[i]的nowMax和nowMin。
这个想法也太美妙了吧，出现负数的话，只要改下nowMax和nowMin就可以解决了。
因为每个num[i]都进行过保存，所以用max来记录最大的值。

相当于是，dp[i-1]保存的是，有第i-1个位置num值的最大值，那么dp[i]的值应该是Math.max(dp[i-1]*num[i], num[i])，但有个问题，负数的存在，所以应该把最小值也保存下来，这样就OK啦
别人真的太聪明啦，其实这么一想，似乎和最大连续子序列差不多，唯一的不同就是有负数。相当于求两个，最大连续子序列和最小连续子序列，出现负数后，进行两者变换。
这题不错。

